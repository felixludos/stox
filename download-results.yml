ACA.PA:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ADYEN.AS:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1
      (char 0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
AIQUY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1
      (char 0)'')'}
AKZOY:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
AMP.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ARGX.BR:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')', mutualfund_holders: 'ValueError(''time
      data "Apr 30, 2023" doesn\''t match format "%B %d, %Y", at position 1. You might
      want to try:\n    - passing `format` if your strings have a consistent format;\n    -
      passing `format=\''ISO8601\''` if your strings are all ISO8601 but not necessarily
      in exactly the same format;\n    - passing `format=\''mixed\''`, and the format
      will be inferred for each element individually. You might want to use `dayfirst`
      alongside this.'')'}
ASM.AS:
  av: {listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
AZM.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
BAMI.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
BAS.DE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1
      (char 0)'')'}
BELA.AT:
  av: {ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')',
    listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
BMED.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
BMWYY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
BNP.PA:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
BPE.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
CABK.MC:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
CAI.VI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
CENER.AT:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1
      (char 0)'')'}
CGCBV.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
CNHI.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
COLR.BR:
  av: {ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')',
    listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
CPR.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
CUYTY:
  av: {ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')',
    listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
DIA.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
DLAKY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', listing_status: 'JSONDecodeError(''Expecting value: line 1 column 1
      (char 0)'')'}
EADSY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
EBS.VI:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
EDPFY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ELISA.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ELPE.AT:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ENEL.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ENI.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
EONGY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
FBK.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
FINMY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
FORTUM.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
G.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
GALP.LS:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 2. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
GASNY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
HDELY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
HEI.DE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
HTO.AT:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 2. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
ICAGY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
IG.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
IP.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
ISNPY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
ISP.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KCR.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KEMIRA.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KER.PA:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
KESKOB.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KKOYY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KNEBV.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
KOJAMO.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
LDO.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
LIN:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
LR.PA:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
MB.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
MBG.DE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
METSB.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
METSO.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
MMK.VI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
MONC.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
MTUAY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
NDA-FI.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
NESTE.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
NEXI.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
NKRKY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
NOKIA.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
OR.PA:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Jul 31, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
ORNBV.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
OUT1V.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
PHIA.AS:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
PIRC.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
PRY.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
PSN.L:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
PST.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
RACE:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
RACE.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
REC.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
REN.AS:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
RWEOY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jul 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
SAB.MC:
  av: {ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
SAMPO.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SBOEY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SLVYY:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SMT.L:
  yahoo: {institutional_holders: 'ValueError(''time data "Jul 31, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')', mutualfund_holders: 'ValueError(''time
      data "Jul 31, 2023" doesn\''t match format "%B %d, %Y", at position 1. You might
      want to try:\n    - passing `format` if your strings have a consistent format;\n    -
      passing `format=\''ISO8601\''` if your strings are all ISO8601 but not necessarily
      in exactly the same format;\n    - passing `format=\''mixed\''`, and the format
      will be inferred for each element individually. You might want to use `dayfirst`
      alongside this.'')'}
SPM.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SRG.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SRGZ:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
STERV.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
STLAM.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
SY1.DE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TELIA1.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TEN.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TIETO.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TIT.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TRN.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TTE.PA:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
TYRES.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
UCG.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
UMI.BR:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
UNA.AS:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
UNCRY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
UNI.MI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
UPM.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
UPMMY:
  yahoo: {institutional_holders: 'ValueError(''time data "Jul 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 2. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
VALMT.HE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
VEOEY:
  av: {ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char 0)'')'}
VOE.VI:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
WTKWY:
  yahoo: {institutional_holders: 'ValueError(''time data "Apr 29, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
ZAL.DE:
  av: {earnings_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')', ipo_calendar: 'JSONDecodeError(''Expecting value: line 1 column 1 (char
      0)'')'}
  yahoo: {institutional_holders: 'ValueError(''time data "Jun 30, 2023" doesn\''t
      match format "%B %d, %Y", at position 1. You might want to try:\n    - passing
      `format` if your strings have a consistent format;\n    - passing `format=\''ISO8601\''`
      if your strings are all ISO8601 but not necessarily in exactly the same format;\n    -
      passing `format=\''mixed\''`, and the format will be inferred for each element
      individually. You might want to use `dayfirst` alongside this.'')'}
